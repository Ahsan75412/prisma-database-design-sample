// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// in prisma convention database model said the table name should be plural, for example users

// model users{
//   //id on this database can be increment automatically
//   id Int @id @default(autoincrement())
//   email String @unique //unique email 
//   name String? // ? is nullable
// }




// model demo1{
//   id Int @id @default(autoincrement())
//   col1 String //only string
//   col2 String? //nullable
//   col3 String @unique //unique col value
//   col4 String @default("hello") // if not supplied any value then default to "hello"


//   col5 Int @db.UnsignedInt // only integer positive value can be recived here
//    col6 Int // it can be recived positive or negative value
//    col7 BigInt // it can be recived big integer equavalent column created here!
//    col8 BigInt @db.UnsignedBigInt //in can be recived big int value but only positive 
//    col9 Int @db.SmallInt 
//    col10 Int @db.UnsignedSmallInt 
//    col11 Int @db.UnsignedMediumInt
//    col12 Int @db.MediumInt
//    col13 Int @db.TinyInt
//    col14 Int @db.UnsignedTinyInt
//    col15 Decimal
//    col16 Float



//    col17 String @db.VarChar(1000)
//    col18 String @db.TinyText
//    col19 String @db.Text
//    col20 String @db.LongText
//    col21 String @db.Char(30)

// }


// model demo2{
//   id Int @id @default(autoincrement())


//   col1 DateTime
//   col2 DateTime @db.Date
//   col3 DateTime @db.Time
//   col4 DateTime @db.Timestamp()

//   col5 Boolean
// }




// model demo3{
//     id Int @id @default(autoincrement())

//     col1 Bytes @db.Blob // binary large object equavalent data is created
//     col2 Bytes @db.LongBlob // binary long object equavalent data is created
//     col3 Bytes @db.MediumBlob 
//     col4 Bytes @db.VarBinary(100)
//     col5 Bytes @db.Binary(100)
//     col6 UserType 
  
// }

//  enum UserType{ //which is create like dropdown in DB.
//     Admin
//     Staff
// }




// inventory database full practice day 2 in prisma

model users{

  id Int @id @default(autoincrement())
  firstName String @db.VarChar(50)
  lastName String @db.VarChar(50)
  email String @db.VarChar(50) @unique
  mobile String @db.VarChar(50)
  password String @db.VarChar(50)
  otp String @db.VarChar(50) @default("0")


 // one user can have many customer that's why in relationship with the user and customer to write to connect:

  customers customers[]
  categories categories[]
  products products[]
  invoices invoices[]
  invoice_products invoice_products[]


//must be thaktei hobe prottek db te
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

}







model customers{
   id Int @id @default(autoincrement())
   name String @db.VarChar(50)
   email String @db.VarChar(50)
   mobile String @db.VarChar(50)

  
//relation customer with users
// onDelete: Restrict , onUpdate: Cascadede means oi database er user k totokhn delete kora jabe na joto khn oi user er customer ache , r onUpdateCascade holo jodi kicu update hoy tahole auto sob update hoye jabe

  user_id Int 

    users users @relation(fields: [user_id] , references: [id] , onDelete: Restrict , onUpdate: Cascade)

  invoices invoices[]
//must be thaktei hobe prottek db te
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

}





model categories{

   id Int @id @default(autoincrement())
   name String @db.VarChar(50)

     user_id Int 

    users users @relation(fields: [user_id] , references: [id] , onDelete: Restrict , onUpdate: Cascade)

  products products[]

//must be thaktei hobe prottek db te
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

}




model products{

   id Int @id @default(autoincrement())
   name String @db.VarChar(50)
   price String @db.VarChar(50)
   unit String @db.VarChar(50)

    user_id Int 
    users users @relation(fields: [user_id] , references: [id] , onDelete: Restrict , onUpdate: Cascade)

    category_id Int 
    categories categories @relation(fields: [category_id] , references: [id] , onDelete: Restrict , onUpdate: Cascade)


  invoice_products invoice_products[]
//must be thaktei hobe prottek db te
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

}



model invoices {

   id Int @id @default(autoincrement())
   total String @db.VarChar(50)
   discount String @db.VarChar(50)
   vat String @db.VarChar(50)
   payable String @db.VarChar(50)

    user_id Int 
    users users @relation(fields: [user_id] , references: [id] , onDelete: Restrict , onUpdate: Cascade)

  
    customer_id Int 
    customers customers @relation(fields: [customer_id] , references: [id] , onDelete: Restrict , onUpdate: Cascade)

  invoice_products invoice_products[]
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

}



model invoice_products{

  id Int @id @default(autoincrement())

  qty String @db.VarChar(50)
  sale_price String @db.VarChar(50)

    user_id Int 
    users users @relation(fields: [user_id] , references: [id] , onDelete: Restrict , onUpdate: Cascade)

    product_id Int 
    products products @relation(fields: [product_id] , references: [id] , onDelete: Restrict , onUpdate: Cascade)

    invoice_id Int 
    invoices invoices @relation(fields: [invoice_id] , references: [id] , onDelete: Restrict , onUpdate: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}